Index: app/src/main/java/com/example/carspotter/LoginFragment.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.carspotter;\r\n\r\nimport android.content.DialogInterface;\r\nimport android.os.Bundle;\r\n\r\nimport androidx.constraintlayout.widget.ConstraintLayout;\r\nimport androidx.constraintlayout.widget.ConstraintSet;\r\nimport androidx.fragment.app.Fragment;\r\nimport androidx.fragment.app.FragmentTransaction;\r\nimport androidx.recyclerview.widget.RecyclerView;\r\n\r\nimport android.view.LayoutInflater;\r\nimport android.view.View;\r\nimport android.view.ViewGroup;\r\nimport android.widget.Toast;\r\n\r\nimport com.android.volley.AuthFailureError;\r\nimport com.android.volley.Request;\r\nimport com.android.volley.RequestQueue;\r\nimport com.android.volley.Response;\r\nimport com.android.volley.VolleyError;\r\nimport com.android.volley.toolbox.JsonArrayRequest;\r\nimport com.android.volley.toolbox.StringRequest;\r\nimport com.android.volley.toolbox.Volley;\r\nimport com.example.carspotter.model.Spot;\r\nimport com.google.android.gms.common.SignInButton;\r\nimport com.google.android.material.dialog.MaterialAlertDialogBuilder;\r\nimport com.google.android.material.floatingactionbutton.ExtendedFloatingActionButton;\r\nimport com.google.android.material.floatingactionbutton.FloatingActionButton;\r\nimport com.google.android.material.textfield.TextInputEditText;\r\nimport com.google.android.material.textfield.TextInputLayout;\r\n\r\nimport org.json.JSONArray;\r\nimport org.json.JSONException;\r\n\r\nimport java.io.UnsupportedEncodingException;\r\nimport java.net.URLEncoder;\r\nimport java.nio.charset.Charset;\r\nimport java.nio.charset.StandardCharsets;\r\nimport java.security.NoSuchAlgorithmException;\r\nimport java.time.LocalDate;\r\nimport java.time.LocalTime;\r\nimport java.util.Collections;\r\nimport java.util.HashMap;\r\nimport java.util.Map;\r\nimport java.util.Random;\r\nimport java.security.MessageDigest;\r\nimport java.util.UUID;\r\nimport java.util.regex.Matcher;\r\nimport java.util.regex.Pattern;\r\n\r\npublic class LoginFragment extends Fragment {\r\n    /**\r\n     * These are needed for the login process\r\n     */\r\n    private ConstraintLayout loginLayout;\r\n    private String REGISTER_URL = \"https://studev.groept.be/api/a22pt304/RegisterUser\";\r\n    private String CHECK_USER_URL = \"https://studev.groept.be/api/a22pt304/CheckUser\";\r\n    private String LOGIN_URL = \"https://studev.groept.be/api/a22pt304/CheckPass\";\r\n    private String STRING_URL = \"https://studev.groept.be/api/a22pt304/GetRandomString\";\r\n\r\n    private View view;\r\n    private ExtendedFloatingActionButton loginfab;\r\n    private TextInputEditText username;\r\n    private TextInputEditText password;\r\n    private String givenUser;\r\n    boolean exists = false;\r\n\r\n\r\n    /**\r\n     * These are needed to switch to a list of all the user's spots\r\n     */\r\n    private RecyclerView personalSpots;\r\n    private ConstraintLayout spotLayout;\r\n    private FloatingActionButton logoutBtn;\r\n\r\n    public LoginFragment() {\r\n        // Required empty public constructor\r\n    }\r\n    public static LoginFragment newInstance(String param1, String param2) {\r\n        LoginFragment fragment = new LoginFragment();\r\n        return fragment;\r\n    }\r\n\r\n    @Override\r\n    public void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n\r\n    }\r\n\r\n    @Override\r\n    public View onCreateView(LayoutInflater inflater, ViewGroup container,\r\n                             Bundle savedInstanceState) {\r\n        // Inflate the layout for this fragment\r\n        view = inflater.inflate(R.layout.fragment_login, container, false);\r\n        loginfab = (ExtendedFloatingActionButton) view.findViewById(R.id.loginfab);\r\n        username = view.findViewById(R.id.username);\r\n        password = view.findViewById(R.id.password);\r\n\r\n        loginLayout = view.findViewById(R.id.loginLayout);\r\n        spotLayout = view.findViewById(R.id.spotLayout);\r\n        logoutBtn = view.findViewById(R.id.logoutBtn);\r\n\r\n        if (((MainActivity) (getContext())).getUser() != null) {\r\n            toggleLayout(newLayout.personalSpots);\r\n        }\r\n        else {\r\n            toggleLayout(newLayout.login);\r\n        }\r\n        logoutListener();\r\n        Process();\r\n        return view;\r\n    }\r\n    private void Process(){\r\n        loginfab.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View v) {\r\n                /**\r\n                 * Here we simply check if both fields are filled in, if so we proceed to processing the data.\r\n                 */\r\n                //TODO: vermijd speciale characters\r\n\r\n                // Check if username is filled in\r\n                int check = 0;\r\n                String input = username.getText().toString().trim();\r\n                if (input.isEmpty()) {\r\n                    username.setError(\"This field cannot be empty\");\r\n                } else {\r\n                    username.setError(null);\r\n                    check += 1;\r\n                }\r\n\r\n                // Check if username contains special characters\r\n                Pattern specialChars = Pattern.compile (\"[!@#$%&*()_+=|<>?{}\\\\[\\\\]~'\\\"/;`%:-]\");\r\n                Matcher hasSpecialUser = specialChars.matcher(input);\r\n                if (hasSpecialUser.find()) {\r\n                    username.setError(\"The username can't contain any special characters!\");\r\n                }\r\n                else {\r\n                    username.setError(null);\r\n                    check += 1;\r\n                }\r\n\r\n                // Check if password is filled in\r\n                input = password.getText().toString().trim();\r\n                if (input.isEmpty()) {\r\n                    password.setError(\"This field cannot be empty\");\r\n                } else {\r\n                    password.setError(null);\r\n                    check += 1;\r\n                }\r\n                // Check if username contains special characters\r\n                Matcher hasSpecialPass = specialChars.matcher(input);\r\n                if (hasSpecialPass.find()) {\r\n                    password.setError(\"The password can't contain any special characters!\");\r\n                }\r\n                else {\r\n                    password.setError(null);\r\n                    check += 1;\r\n                }\r\n\r\n                if(check == 4){\r\n                    givenUser = String.valueOf(username.getText());\r\n                    processData();\r\n                }\r\n            }\r\n        });\r\n    }\r\n    public static boolean Password_Validation(String password)\r\n    {\r\n        if(password.length()>=8)\r\n        {\r\n            Pattern specialChars = Pattern.compile (\"[!@#$%&*()_+=|<>?{}\\\\[\\\\]~-]\");\r\n\r\n            Matcher hasSpecial = specialChars.matcher(password);\r\n\r\n            return hasSpecial.find();\r\n\r\n        }\r\n        else\r\n            return false;\r\n\r\n    }\r\n    private void processData() {\r\n        /**\r\n         * Here we first check if the user already exists. If they do, the password will be checked and they'll log in.\r\n         * If the user doesn't already exist, they'll be promted with a pop-up to confirm the registration.\r\n         */\r\n        RequestQueue requestQueue = Volley.newRequestQueue(getActivity());\r\n        JsonArrayRequest queueRequest = new JsonArrayRequest(\r\n                Request.Method.GET,\r\n                CHECK_USER_URL + \"/\" + givenUser,\r\n                null,\r\n                new Response.Listener<JSONArray>() {\r\n                    @Override\r\n                    public void onResponse(JSONArray response) {\r\n                        // Check if database contains the user\r\n                        if (response.length() != 0){\r\n                            login();\r\n                        }\r\n                        else {\r\n                            register();\r\n                        }\r\n                    }\r\n                },\r\n                new Response.ErrorListener() {\r\n                    @Override\r\n                    public void onErrorResponse(VolleyError error) {\r\n                        Toast.makeText(\r\n                                getActivity(),\r\n                                \"Unable to communicate with the server\",\r\n                                Toast.LENGTH_SHORT).show();\r\n                    }\r\n                });\r\n        requestQueue.add(queueRequest);\r\n    }\r\n    private void register() {\r\n        new MaterialAlertDialogBuilder(getContext())\r\n                .setTitle(\"Register\")\r\n                .setMessage(\"Seems like you don't already have an account, do you wish to register? DISCLAIMER: You will not be able to change your username afterwards, chose carefully.\")\r\n                .setNeutralButton(getResources().getString(R.string.no), new DialogInterface.OnClickListener() {\r\n                    @Override\r\n                    public void onClick(DialogInterface dialog, int which) {\r\n                        // Respond to neutral button press\r\n                    }\r\n                })\r\n                .setPositiveButton(getResources().getString(R.string.yes), new DialogInterface.OnClickListener() {\r\n                    @Override\r\n                    public void onClick(DialogInterface dialog, int which) {\r\n                        // Respond to positive button press\r\n                        RequestQueue requestQueue = Volley.newRequestQueue(getContext());\r\n                        StringRequest submitRequest = new StringRequest(\r\n                                Request.Method.POST,\r\n                                REGISTER_URL,\r\n                                new Response.Listener<String>() {\r\n                                    @Override\r\n                                    public void onResponse(String response) {\r\n                                        ((MainActivity) (getContext())).setUser(givenUser);\r\n                                        Toast.makeText(\r\n                                                getActivity(),\r\n                                                \"Succesfully registered, welcome \"+givenUser+\"!\",\r\n                                                Toast.LENGTH_SHORT).show();\r\n                                    }\r\n                                },\r\n                                new Response.ErrorListener() {\r\n                                    @Override\r\n                                    public void onErrorResponse(VolleyError error) {\r\n                                        Toast.makeText(\r\n                                                getActivity(),\r\n                                                \"Unable to connect to database\" + error,\r\n                                                Toast.LENGTH_SHORT).show();\r\n                                    }\r\n                                }\r\n                        ) { //NOTE THIS PART: here we are passing the POST parameters to the webservice\r\n                            @Override\r\n                            protected Map<String, String> getParams() {\r\n                                String newPass = String.valueOf(password.getText());\r\n                                String randomString = generateRandomString();\r\n                                String hashedPass = hash(newPass,randomString);\r\n\r\n                                Map<String, String> params = new HashMap<>();\r\n                                params.put(\"user\", givenUser);\r\n                                params.put(\"pass\", hashedPass);\r\n                                params.put(\"string\", randomString);\r\n                                return params;\r\n                            }\r\n                        };\r\n                        requestQueue.add(submitRequest);\r\n                    }\r\n                })\r\n                .show();\r\n    }\r\n    static String generateRandomString() {\r\n        // This code is used for generating the randomString\r\n        UUID randomUUID = UUID.randomUUID();\r\n        String randomString = randomUUID.toString().replaceAll(\"_\", \"\");\r\n        randomString = randomUUID.toString().replaceAll(\"-\", \"\");\r\n        return randomString;\r\n    }\r\n    private String hash(String password, String randomString){\r\n        String hashedPass = \"\";\r\n        try {\r\n            MessageDigest messageDigest = MessageDigest.getInstance(\"SHA-256\");\r\n            messageDigest.update((password + randomString).getBytes(StandardCharsets.UTF_8));\r\n            byte[] hash = messageDigest.digest();\r\n\r\n            // Convert the byte array to a hexadecimal string\r\n            StringBuilder hexString = new StringBuilder();\r\n            for (byte b : hash) {\r\n                String hex = String.format(\"%02x\", b);\r\n                hexString.append(hex);\r\n            }\r\n            hashedPass = hexString.toString();\r\n        } catch (NoSuchAlgorithmException e) {\r\n            e.printStackTrace();\r\n        }\r\n        return hashedPass;\r\n    }\r\n    private void login(){\r\n        /**\r\n         * Here we create the hashed password from the given textfields and then proceed to checkLogin()\r\n         */\r\n        RequestQueue requestQueue = Volley.newRequestQueue(getActivity());\r\n        JsonArrayRequest queueRequest = new JsonArrayRequest(\r\n                Request.Method.GET,\r\n            STRING_URL + \"/\" + givenUser,\r\n                null,\r\n                new Response.Listener<JSONArray>() {\r\n                    @Override\r\n                    public void onResponse(JSONArray response) {\r\n                        // Check if database contains the user\r\n                        try {\r\n                            String randomString = response.getJSONObject(0).getString(\"randomString\");\r\n                            String givenPass = String.valueOf(password.getText());\r\n\r\n                            String hashedPass = hash(givenPass,randomString);\r\n                            checkLogin(hashedPass);\r\n                        } catch (JSONException e) {\r\n                            throw new RuntimeException(e);\r\n                        }\r\n                    }\r\n                },\r\n                new Response.ErrorListener() {\r\n                    @Override\r\n                    public void onErrorResponse(VolleyError error) {\r\n                        Toast.makeText(\r\n                                getActivity(),\r\n                                \"Unable to communicate with the server\",\r\n                                Toast.LENGTH_SHORT).show();\r\n                    }\r\n                });\r\n        requestQueue.add(queueRequest);\r\n    }\r\n\r\n    /**\r\n     * Here we check if the local hashed password matches the one stored in the database.\r\n     * The actual check will be in the SQL query for user safety.\r\n     */\r\n     private void checkLogin(String hashedPass){\r\n         RequestQueue requestQueue = Volley.newRequestQueue(getActivity());\r\n         JsonArrayRequest queueRequest = new JsonArrayRequest(\r\n                 Request.Method.GET,\r\n                 LOGIN_URL + \"/\" + hashedPass + \"/\" +givenUser,\r\n                 null,\r\n                 new Response.Listener<JSONArray>() {\r\n                     @Override\r\n                     public void onResponse(JSONArray response) {\r\n                         // Check if database contains the user\r\n                         try {\r\n                             if (response.getJSONObject(0).getString(\"password_match\").equals(\"1\")){\r\n                                 String loggedUser = String.valueOf(username.getText());\r\n                                 ((MainActivity) (getContext())).setUser(loggedUser);\r\n                                 Toast.makeText(\r\n                                         getActivity(),\r\n                                         \"Succesfully logged in, welcome back \"+loggedUser,\r\n                                         Toast.LENGTH_SHORT).show();\r\n                                 toggleLayout(newLayout.personalSpots);\r\n                             }\r\n                             else {\r\n                                 Toast.makeText(\r\n                                         getActivity(),\r\n                                         \"Password doesn't match! Please try again.\",\r\n                                         Toast.LENGTH_SHORT).show();\r\n                             }\r\n                         } catch (JSONException e) {\r\n                             throw new RuntimeException(e);\r\n                         }\r\n                     }\r\n                 },\r\n                 new Response.ErrorListener() {\r\n                     @Override\r\n                     public void onErrorResponse(VolleyError error) {\r\n                         Toast.makeText(\r\n                                 getActivity(),\r\n                                 \"Unable to communicate with the server\",\r\n                                 Toast.LENGTH_SHORT).show();\r\n                     }\r\n                 });\r\n         requestQueue.add(queueRequest);\r\n     }\r\n\r\n    /**\r\n     * Once logged in we switch layouts\r\n     */\r\n    public enum newLayout {\r\n        login,\r\n        personalSpots;\r\n    }\r\n    private void toggleLayout(newLayout layout){\r\n        if(layout == newLayout.login){\r\n            loginLayout.setVisibility(view.VISIBLE);\r\n            loginfab.setVisibility(view.VISIBLE);\r\n\r\n            spotLayout.setVisibility(view.INVISIBLE);\r\n        }\r\n        else{\r\n            loginLayout.setVisibility(view.INVISIBLE);\r\n            loginfab.setVisibility(view.INVISIBLE);\r\n\r\n            spotLayout.setVisibility(view.VISIBLE);\r\n        }\r\n    }\r\n\r\n    private void logoutListener(){\r\n        logoutBtn.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View v) {\r\n                ((MainActivity) (getContext())).logoutUser();\r\n                toggleLayout(newLayout.login);\r\n            }\r\n        });\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/carspotter/LoginFragment.java b/app/src/main/java/com/example/carspotter/LoginFragment.java
--- a/app/src/main/java/com/example/carspotter/LoginFragment.java	(revision 06abda9a3e6302745a3d23ac87395ba228b8cacb)
+++ b/app/src/main/java/com/example/carspotter/LoginFragment.java	(date 1684235432337)
@@ -118,7 +118,6 @@
                 /**
                  * Here we simply check if both fields are filled in, if so we proceed to processing the data.
                  */
-                //TODO: vermijd speciale characters
 
                 // Check if username is filled in
                 int check = 0;
@@ -240,6 +239,7 @@
                                                 getActivity(),
                                                 "Succesfully registered, welcome "+givenUser+"!",
                                                 Toast.LENGTH_SHORT).show();
+                                        toggleLayout(newLayout.personalSpots);
                                     }
                                 },
                                 new Response.ErrorListener() {
Index: app/src/main/java/com/example/carspotter/SpotLocationFragment.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.carspotter;\r\n\r\nimport androidx.annotation.NonNull;\r\nimport androidx.annotation.Nullable;\r\nimport androidx.fragment.app.Fragment;\r\n\r\nimport android.os.Bundle;\r\nimport android.view.LayoutInflater;\r\nimport android.view.View;\r\nimport android.view.ViewGroup;\r\nimport android.widget.ProgressBar;\r\nimport android.widget.TextView;\r\nimport android.widget.Toast;\r\n\r\nimport com.android.volley.Request;\r\nimport com.android.volley.RequestQueue;\r\nimport com.android.volley.Response;\r\nimport com.android.volley.VolleyError;\r\nimport com.android.volley.toolbox.JsonArrayRequest;\r\nimport com.android.volley.toolbox.Volley;\r\nimport com.example.carspotter.model.Car;\r\nimport com.example.carspotter.model.Spot;\r\nimport com.google.android.gms.maps.CameraUpdateFactory;\r\nimport com.google.android.gms.maps.GoogleMap;\r\nimport com.google.android.gms.maps.OnMapReadyCallback;\r\nimport com.google.android.gms.maps.SupportMapFragment;\r\nimport com.google.android.gms.maps.model.LatLng;\r\nimport com.google.android.gms.maps.model.MarkerOptions;\r\nimport com.google.android.gms.maps.model.TileOverlay;\r\nimport com.google.android.gms.maps.model.TileOverlayOptions;\r\nimport com.google.maps.android.heatmaps.HeatmapTileProvider;\r\n\r\nimport org.json.JSONArray;\r\nimport org.json.JSONException;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.Collections;\r\nimport java.util.List;\r\nimport java.util.stream.Collectors;\r\nimport java.util.stream.Stream;\r\n\r\npublic class SpotLocationFragment extends Fragment {\r\n    private GoogleMap map;\r\n    private HeatmapTileProvider provider;\r\n    private TileOverlay overlay;\r\n    private static final String QUEUE_URL = \"https://studev.groept.be/api/a22pt304/GetSpotsForMap\";\r\n    private List<LatLng> spots = new ArrayList<>();\r\n    private Spot selectedSpot;\r\n    private ProgressBar progressBar;\r\n    private OnMapReadyCallback callback = new OnMapReadyCallback() {\r\n\r\n        /**\r\n         * Manipulates the map once available.\r\n         * This callback is triggered when the map is ready to be used.\r\n         * This is where we can add markers or lines, add listeners or move the camera.\r\n         * In this case, we just add a marker near Sydney, Australia.\r\n         * If Google Play services is not installed on the device, the user will be prompted to\r\n         * install it inside the SupportMapFragment. This method will only be triggered once the\r\n         * user has installed Google Play services and returned to the app.\r\n         */\r\n        @Override\r\n        public void onMapReady(GoogleMap googleMap) {\r\n            Toast.makeText(\r\n                    getActivity(),\r\n                    \"Retreiving Spots from Database\",\r\n                    Toast.LENGTH_LONG).show();\r\n            map = googleMap;\r\n        }\r\n    };\r\n\r\n    @Nullable\r\n    @Override\r\n    public View onCreateView(@NonNull LayoutInflater inflater,\r\n                             @Nullable ViewGroup container,\r\n                             @Nullable Bundle savedInstanceState) {\r\n        View view = inflater.inflate(R.layout.fragment_spot_location, container, false);\r\n\r\n        progressBar = (ProgressBar) view.findViewById(R.id.progress_bar);\r\n        progressBar.setVisibility(View.VISIBLE);\r\n\r\n        Bundle bundle = this.getArguments();\r\n        selectedSpot = bundle.getParcelable(\"Spot\");\r\n\r\n        requestSpotsFromCarId(String.valueOf(selectedSpot.getCar_id()));\r\n        return view;\r\n    }\r\n\r\n    @Override\r\n    public void onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceState) {\r\n        super.onViewCreated(view, savedInstanceState);\r\n        SupportMapFragment mapFragment =\r\n                (SupportMapFragment) getChildFragmentManager().findFragmentById(R.id.map);\r\n        if (mapFragment != null) {\r\n            mapFragment.getMapAsync(callback);\r\n        }\r\n    }\r\n    private void requestSpotsFromCarId(String item) {\r\n        // Retrieve spots from database with Volley\r\n        RequestQueue requestQueue = Volley.newRequestQueue(getActivity());\r\n        JsonArrayRequest queueRequest = new JsonArrayRequest(\r\n                Request.Method.GET,\r\n                QUEUE_URL+\"/\"+item,\r\n                null,\r\n                new Response.Listener<JSONArray>() {\r\n                    @Override\r\n                    public void onResponse(JSONArray response) {\r\n                        processJSONResponse(response);\r\n                        if (spots.size() != 0){\r\n                            prepMap();\r\n                            Toast.makeText(\r\n                                    getActivity(),\r\n                                    \"Succesfully processed all spots\",\r\n                                    Toast.LENGTH_LONG).show();\r\n                        }\r\n                        else {\r\n                            Toast.makeText(\r\n                                    getActivity(),\r\n                                    \"error: there was an issue retreiving data from server\",\r\n                                    Toast.LENGTH_LONG).show();\r\n                        }\r\n                        progressBar.setVisibility(View.INVISIBLE);\r\n                    }\r\n                },\r\n                new Response.ErrorListener() {\r\n                    @Override\r\n                    public void onErrorResponse(VolleyError error) {\r\n                        Toast.makeText(\r\n                                getActivity(),\r\n                                \"Unable to communicate with the server\",\r\n                                Toast.LENGTH_LONG).show();\r\n                        progressBar.setVisibility(View.INVISIBLE);\r\n                    }\r\n                });\r\n        requestQueue.add(queueRequest);\r\n    }\r\n\r\n    private void processJSONResponse(JSONArray response) {\r\n        //Add spots from database into local list\r\n        spots.clear();\r\n        for (int i = 0; i < response.length(); i++) {\r\n            try {\r\n                Double lat = response.getJSONObject(i).getDouble(\"lat\");\r\n                Double lng = response.getJSONObject(i).getDouble(\"lng\");\r\n                spots.add(new LatLng(lat, lng));\r\n            } catch (JSONException e) {\r\n                e.printStackTrace();\r\n            }\r\n        }\r\n    }\r\n    protected void prepMap(){\r\n        //HEATPMAP:\r\n        // 1: Create a HeatmapTileProvider using the data points\r\n        provider = new HeatmapTileProvider.Builder()\r\n                .data(spots)\r\n                .build();\r\n        // 2: Add the heatmap overlay to the map\r\n        map.addTileOverlay(new TileOverlayOptions().tileProvider(provider));\r\n\r\n        //MARKER\r\n        // Set the camera position to the center of the heatmap data points\r\n        map.addMarker(new MarkerOptions().position(selectedSpot.getLatLng()).title(\"Selected Spot\"));\r\n        map.moveCamera(CameraUpdateFactory.newLatLng(selectedSpot.getLatLng()));\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/carspotter/SpotLocationFragment.java b/app/src/main/java/com/example/carspotter/SpotLocationFragment.java
--- a/app/src/main/java/com/example/carspotter/SpotLocationFragment.java	(revision 06abda9a3e6302745a3d23ac87395ba228b8cacb)
+++ b/app/src/main/java/com/example/carspotter/SpotLocationFragment.java	(date 1684235753613)
@@ -44,8 +44,10 @@
     private HeatmapTileProvider provider;
     private TileOverlay overlay;
     private static final String QUEUE_URL = "https://studev.groept.be/api/a22pt304/GetSpotsForMap";
+    private static final String QUEUE_USER_URL = "https://studev.groept.be/api/a22pt304/GetUserSpotsForMap";
     private List<LatLng> spots = new ArrayList<>();
     private Spot selectedSpot;
+    private boolean spotsFromUser;
     private ProgressBar progressBar;
     private OnMapReadyCallback callback = new OnMapReadyCallback() {
 
@@ -80,8 +82,14 @@
 
         Bundle bundle = this.getArguments();
         selectedSpot = bundle.getParcelable("Spot");
+        spotsFromUser = bundle.getParcelable("spotsFromUser");
 
-        requestSpotsFromCarId(String.valueOf(selectedSpot.getCar_id()));
+        if(spotsFromUser){
+            requestSpotsFromUser(String.valueOf(selectedSpot.getCar_id()));
+        }
+        else {
+            requestSpotsFromCarId(String.valueOf(selectedSpot.getCar_id()));
+        }
         return view;
     }
 
@@ -133,6 +141,46 @@
                 });
         requestQueue.add(queueRequest);
     }
+    private void requestSpotsFromUser(String item) {
+        // Retrieve spots from database with Volley
+        String user = ((MainActivity) (getContext())).getUser();
+        RequestQueue requestQueue = Volley.newRequestQueue(getActivity());
+        JsonArrayRequest queueRequest = new JsonArrayRequest(
+                Request.Method.GET,
+                QUEUE_USER_URL+"/"+user,
+                null,
+                new Response.Listener<JSONArray>() {
+                    @Override
+                    public void onResponse(JSONArray response) {
+                        processJSONResponse(response);
+                        if (spots.size() != 0){
+                            prepMap();
+                            Toast.makeText(
+                                    getActivity(),
+                                    "Succesfully processed all spots",
+                                    Toast.LENGTH_LONG).show();
+                        }
+                        else {
+                            Toast.makeText(
+                                    getActivity(),
+                                    "error: there was an issue retreiving data from server",
+                                    Toast.LENGTH_LONG).show();
+                        }
+                        progressBar.setVisibility(View.INVISIBLE);
+                    }
+                },
+                new Response.ErrorListener() {
+                    @Override
+                    public void onErrorResponse(VolleyError error) {
+                        Toast.makeText(
+                                getActivity(),
+                                "Unable to communicate with the server",
+                                Toast.LENGTH_LONG).show();
+                        progressBar.setVisibility(View.INVISIBLE);
+                    }
+                });
+        requestQueue.add(queueRequest);
+    }
 
     private void processJSONResponse(JSONArray response) {
         //Add spots from database into local list
